import vnstock
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import datetime as dt
from talib import MACD, SMA, ADX, CCI
from vnstock import Vnstock

# Danh s√°ch c·ªï phi·∫øu c·∫ßn l·∫•y d·ªØ li·ªáu
stocks = ["CTG", "VIB", "ACB", "BID", "EIB", "HDB", "MBB", "OCB", "SHB", "STB", "TPB", "VBB", "VPB","VN30F1M"]

# Th·ªùi gian b·∫Øt ƒë·∫ßu v√† k·∫øt th√∫c
train_end_date = "2024-12-31"
test_start_date = "2025-01-01"
end_date = dt.datetime.now().strftime('%Y-%m-%d')
start_date = (dt.datetime.now() - dt.timedelta(days=5000)).strftime('%Y-%m-%d')

# L·∫•y d·ªØ li·ªáu t·ª´ vnstock
vnstock_instance = Vnstock()
results = {}

for stock in stocks:
    try:
        # L·∫•y d·ªØ li·ªáu l·ªãch s·ª≠
        df = vnstock_instance.stock(symbol=stock, source='VCI').quote.history(start=start_date, end=end_date)
        df['time'] = pd.to_datetime(df['time'])
        
        # T√≠nh c√°c ch·ªâ b√°o k·ªπ thu·∫≠t
        df["sma_10"] = SMA(df['close'], timeperiod=10)
        df["sma_20"] = SMA(df['close'], timeperiod=20)
        df["sma_50"] = SMA(df['close'], timeperiod=50)
        df["sma_200"] = SMA(df['close'], timeperiod=200)
        macd, signal, _ = MACD(df['close'], fastperiod=12, slowperiod=26, signalperiod=9)
        df["macd"] = macd
        df["signal"] = signal

        # T√≠nh ADX v√† CCI
        df['adx'] = ADX(df['high'], df['low'], df['close'], timeperiod=14)
        df['cci'] = CCI(df['high'], df['low'], df['close'], timeperiod=14)

        # T√≠nh RSI
        delta = df['close'].diff()
        gain = np.where(delta > 0, delta, 0)
        loss = np.where(delta < 0, -delta, 0)
        avg_gain = pd.Series(gain).rolling(window=14).mean()
        avg_loss = pd.Series(loss).rolling(window=14).mean()
        rs = avg_gain / avg_loss
        df['rsi'] = 100 - (100 / (1 + rs))
        df["volume_99"] = df["volume"].rolling(window=20).quantile(0.99)

        # ƒê√°nh d·∫•u t√≠n hi·ªáu mua
        df["buy_signal"] = ((df["macd"] <= -0.2) & (df["rsi"] <= 30) & (df["volume"] > df["volume_99"])).astype(int)
        df["buy_signal_1"] = (df["volume"] > df["volume_99"]).astype(int)
        df["buy_signal_2"] =  ((df["macd"] <= -0.2) & (df["rsi"] <= 30)).astype(int)
        df["buy_signal_3"] = ((df['macd'].shift(1) <= df['signal'].shift(1)) & (df['macd'] > df['signal'])).astype(int)
        
        
        # T√≠nh gi√° thay ƒë·ªïi sau 5 ng√†y
        df["price_after_5"] = df["close"].shift(-5)
        df["price_change"] = (df["price_after_5"] - df["close"]) / df["close"]
        
        # ƒê√°nh d·∫•u c√°c t√≠n hi·ªáu tƒÉng gi√° > 5%
        df["price_up"] = (df["price_change"] > 0.05).astype(int)
        
        # Chia t·∫≠p train v√† test
        train_data = df[df['time'] < test_start_date]
        
        # X√°c ƒë·ªãnh t√≠n hi·ªáu trong t·∫≠p train
        buy_signals = train_data[train_data['buy_signal'] == 1]
        buy_signals_1 = train_data[train_data['buy_signal_1'] == 1]
        buy_signals_2 = train_data[train_data['buy_signal_2'] == 1]
        buy_signals_3 = train_data[train_data['buy_signal_3'] == 1]
        buy_signals_up = buy_signals[buy_signals['price_up'] == 1]
        buy_signals_up_1 = buy_signals_1[buy_signals_1['price_up'] == 1]
        buy_signals_up_2 = buy_signals_2[buy_signals_2['price_up'] == 1]
        buy_signals_up_3 = buy_signals_3[buy_signals_3['price_up'] == 1]
        # T√≠nh x√°c su·∫•t tƒÉng gi√°, tr√°nh l·ªói chia cho 0
        up_percentage = (len(buy_signals_up) / len(buy_signals) * 100) if len(buy_signals) > 0 else 0
        up_percentage_1 = (len(buy_signals_up_1) / len(buy_signals_1) * 100) if len(buy_signals_1) > 0 else 0
        up_percentage_2 = (len(buy_signals_up_2) / len(buy_signals_2) * 100) if len(buy_signals_2) > 0 else 0
        up_percentage_3 = (len(buy_signals_up_3) / len(buy_signals_3) * 100) if len(buy_signals_3) > 0 else 0

        # L∆∞u k·∫øt qu·∫£
        results[stock] = {
            "buy_signal": up_percentage,
            "buy_signal_1": up_percentage_1,
            "buy_signal_2": up_percentage_2,
            "buy_signal_3": up_percentage_3
        }

    except Exception as e:
        print(f"L·ªói khi l·∫•y d·ªØ li·ªáu cho {stock}: {e}")

# üü¢ **T·∫°o b·∫£ng t·ªïng h·ª£p**
summary_df = pd.DataFrame(columns=["Stock", "buy_signal","buy_signal_3", "buy_signal_1", "buy_signal_2", "1 * 2", "Comparison"])

for stock in stocks:
    if stock in results:  # ƒê·∫£m b·∫£o d·ªØ li·ªáu h·ª£p l·ªá
        buy_signal = results[stock]["buy_signal"]
        buy_signal_1 = results[stock]["buy_signal_1"]
        buy_signal_2 = results[stock]["buy_signal_2"]
        buy_signal_3 = results[stock]["buy_signal_3"]

        # T√≠nh t√≠ch x√°c su·∫•t
        buy_signal_product = (buy_signal_1 * buy_signal_2) / 100  # Chia 100 ƒë·ªÉ chu·∫©n h√≥a x√°c su·∫•t

        # So s√°nh v·ªõi buy_signal
        if buy_signal_product < buy_signal:
            comparison = "D∆∞∆°ng"
        elif buy_signal_product > buy_signal:
            comparison = "√Çm"
        else:
            comparison = "ƒê·ªôc l·∫≠p"

        summary_df = pd.concat([summary_df, pd.DataFrame({
            "Stock": [stock],
            "buy_signal": [buy_signal],
            "buy_signal_3": [buy_signal_1],
            "buy_signal_1": [buy_signal_1],
            "buy_signal_2": [buy_signal_2],
            "1 * 2": [buy_signal_product],
            "Comparison": [comparison]
        })], ignore_index=True)

# üü¢ **ƒê·ªãnh d·∫°ng b·∫£ng**
summary_df.set_index("Stock", inplace=True)
summary_df["buy_signal"] = summary_df["buy_signal"].map(lambda x: f"{x:.2f}%")
summary_df["buy_signal_3"] = summary_df["buy_signal_3"].map(lambda x: f"{x:.2f}%")
summary_df["buy_signal_1"] = summary_df["buy_signal_1"].map(lambda x: f"{x:.2f}%")
summary_df["buy_signal_2"] = summary_df["buy_signal_2"].map(lambda x: f"{x:.2f}%")
summary_df["1 * 2"] = summary_df[ "1 * 2"].map(lambda x: f"{x:.2f}%")

# üü¢ **In b·∫£ng t·ªïng h·ª£p**
print("\nüìä T·ªïng h·ª£p x√°c su·∫•t tƒÉng gi√° theo t√≠n hi·ªáu mua:")
print(summary_df)

# N·∫øu mu·ªën in b·∫£ng ƒë·∫πp h∆°n
try:
    from tabulate import tabulate
    print(tabulate(summary_df, headers='keys', tablefmt='grid'))
except ImportError:
    pass  # N·∫øu ch∆∞a c√†i `tabulate`, s·∫Ω ch·ªâ in DataFrame b√¨nh th∆∞·ªùng.

